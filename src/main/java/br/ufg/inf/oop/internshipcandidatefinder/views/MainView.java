/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package br.ufg.inf.oop.internshipcandidatefinder.views;

import br.ufg.inf.oop.internshipcandidatefinder.exceptions.InvalidInputFromUserException;
import br.ufg.inf.oop.internshipcandidatefinder.exceptions.NotFoundException;
import br.ufg.inf.oop.internshipcandidatefinder.models.entities.Endereco;
import br.ufg.inf.oop.internshipcandidatefinder.models.entities.UnidadeFederativa;
import br.ufg.inf.oop.internshipcandidatefinder.models.entities.Universidade;
import br.ufg.inf.oop.internshipcandidatefinder.services.UniversidadeService;
import java.awt.Component;
import java.sql.SQLException;
import java.util.InputMismatchException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author karlos
 */
public class MainView extends javax.swing.JFrame {

    private UniversidadeService universidadeService;

    /**
     * Creates new form MainView
     *
     * @throws java.lang.Exception
     */
    public MainView() throws Exception {
        this.universidadeService = UniversidadeService.getInstance();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        inserirUniversidadeMenuItem = new javax.swing.JMenuItem();
        buscarUniversidadeMenuItem = new javax.swing.JMenuItem();
        atualizarUniversidadeMenuItem = new javax.swing.JMenuItem();
        removerUniversidadeMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Universidade");

        inserirUniversidadeMenuItem.setFont(new java.awt.Font("Ubuntu", 0, 16)); // NOI18N
        inserirUniversidadeMenuItem.setMnemonic('o');
        inserirUniversidadeMenuItem.setText("Inserir");
        inserirUniversidadeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirUniversidadeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(inserirUniversidadeMenuItem);

        buscarUniversidadeMenuItem.setMnemonic('s');
        buscarUniversidadeMenuItem.setText("Buscar");
        buscarUniversidadeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarUniversidadeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(buscarUniversidadeMenuItem);

        atualizarUniversidadeMenuItem.setMnemonic('a');
        atualizarUniversidadeMenuItem.setText("Atualizar");
        atualizarUniversidadeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarUniversidadeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(atualizarUniversidadeMenuItem);

        removerUniversidadeMenuItem.setMnemonic('x');
        removerUniversidadeMenuItem.setText("Remover");
        removerUniversidadeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerUniversidadeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(removerUniversidadeMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Curso");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Inserir");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Buscar");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Atualizar");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Remover");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Aluno");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Inserir");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("Buscar");
        helpMenu.add(aboutMenuItem);

        jMenuItem1.setText("Atualizar");
        helpMenu.add(jMenuItem1);

        jMenuItem2.setText("Remover");
        helpMenu.add(jMenuItem2);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removerUniversidadeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerUniversidadeMenuItemActionPerformed
        //System.exit(0);

        Universidade universidadeASerRemovida = mostrarOpcaoDeSelecaoDeUniversidade(this);

        if (universidadeASerRemovida == null) {
            return;
        }

        try {
            System.out.println("Id da Universidade a ser removida: " + universidadeASerRemovida.getId());
            universidadeService.removerUniversidadePorId(universidadeASerRemovida.getId());
            JOptionPane.showMessageDialog(this, "Universidade removida: " + universidadeASerRemovida.getNome(),
                    "Operação realizada com sucesso.", JOptionPane.INFORMATION_MESSAGE);
        } catch (InvalidInputFromUserException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ENTRADA INVÁLIDA", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            reportInternalError(this, ex);
        }

    }//GEN-LAST:event_removerUniversidadeMenuItemActionPerformed

    private void buscarUniversidadeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarUniversidadeMenuItemActionPerformed
        // TODO add your handling code here:

        Universidade universidadeBuscada = mostrarOpcaoDeSelecaoDeUniversidade(this);

        if (universidadeBuscada == null) {
            //JOptionPane.showMessageDialog(this, "Não foi encontrada nenhuma Universidade com a sigla");
            return;
        }

        JOptionPane.showMessageDialog(this, universidadeBuscada, "Dados de " + universidadeBuscada.getNome(),
                JOptionPane.PLAIN_MESSAGE);

    }//GEN-LAST:event_buscarUniversidadeMenuItemActionPerformed

    private void inserirUniversidadeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirUniversidadeMenuItemActionPerformed
        // TODO add your handling code here:
        //new UniversidadeInsercaoView(this, rootPaneCheckingEnabled).setVisible(true);
        //new UniversidadeInsercaoView().setVisible(true);

        Universidade universidade;
        Endereco endereco;

        String nomeUniversidade = JOptionPane.showInputDialog(this, "Digite o nome da Universidade.",
                "Inserção de Universidade",
                JOptionPane.QUESTION_MESSAGE);
        String siglaUniversidade = JOptionPane.showInputDialog(this, "Digite a sigla da Universidade.",
                "Inserção de Universidade",
                JOptionPane.QUESTION_MESSAGE);
        String cnpjUniversidade = JOptionPane.showInputDialog(this, "Digite o CNPJ da Universidade.",
                "Inserção de Universidade",
                JOptionPane.QUESTION_MESSAGE);
        String telefoneUniversidade = JOptionPane.showInputDialog(this, "Digite o telefone da Universidade.",
                "Inserção de Universidade",
                JOptionPane.QUESTION_MESSAGE);

        try {
            endereco = mostrarOpcaoDeSelecaoDeEndereco(this, "Inserção de Universidade");
            universidade = new Universidade(nomeUniversidade, siglaUniversidade, cnpjUniversidade, telefoneUniversidade,
                    endereco);

            universidadeService.inserirUniversidade(universidade, endereco);
            JOptionPane.showMessageDialog(this, "Universidade inserida:\n\n" + universidade,
                    "Universidade inserida com sucesso", JOptionPane.INFORMATION_MESSAGE);

        } catch (InvalidInputFromUserException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ENTRADA INVÁLIDA", JOptionPane.ERROR_MESSAGE);

        } catch (Exception exception) {
            reportInternalError(this, exception);
        }

    }//GEN-LAST:event_inserirUniversidadeMenuItemActionPerformed

    private void atualizarUniversidadeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarUniversidadeMenuItemActionPerformed
        // TODO add your handling code here:
        Universidade universidadeASerAtualizada = mostrarOpcaoDeSelecaoDeUniversidade(this);

        if (universidadeASerAtualizada == null) {
            return;
        }

        try {
            System.out.println("Id da Universidade a ser alterada: " + universidadeASerAtualizada.getId());

            String possivelNovoNome = JOptionPane.showInputDialog(this, "Digite o novo nome da Universidade ou o mesmo.",
                    universidadeASerAtualizada.getNome());
            String possivelNovaSigla = JOptionPane.showInputDialog(this, "Digite a nova sigla da Universidade ou a mesma.",
                    universidadeASerAtualizada.getSigla());
            String possivelNovoCnpj = JOptionPane.showInputDialog(this, "Digite o novo CNPJ da Universidade ou o mesmo.",
                    universidadeASerAtualizada.getCnpj());
            String possivelNovoTelefone = JOptionPane.showInputDialog(this, "Digite o novo telefone da Universidade ou o mesmo.",
                    universidadeASerAtualizada.getTelefone());
            String possivelNovoCep = JOptionPane.showInputDialog(this, "Digite o novo CEP da Universidade ou o mesmo.",
                    universidadeASerAtualizada.getEndereco().getCep());
            String possivelNovoLogradouro = JOptionPane.showInputDialog(this, "Digite o novo logradouro da Universidade ou o mesmo.",
                    universidadeASerAtualizada.getEndereco().getLogradouro());
            String possivelNovoBairro = JOptionPane.showInputDialog(this, "Digite o novo bairro da Universidade ou o mesmo.",
                    universidadeASerAtualizada.getEndereco().getBairro());
            String possivelNovoMunicipio = JOptionPane.showInputDialog(this, "Digite o novo município da Universidade ou o mesmo.",
                    universidadeASerAtualizada.getEndereco().getMunicipio());
            UnidadeFederativa possivelNovaUnidadeFederativa = UnidadeFederativa.fromSigla(JOptionPane.showInputDialog(
                    this, "Digite a sigla da nova UF da Universidade ou a mesma",
                    universidadeASerAtualizada.getEndereco().getUnidadeFedrativa().getSigla()));

            universidadeASerAtualizada.setNome(possivelNovoNome);
            universidadeASerAtualizada.setSigla(possivelNovaSigla);
            universidadeASerAtualizada.setCnpj(possivelNovoCnpj);
            universidadeASerAtualizada.setTelefone(possivelNovoTelefone);
            universidadeASerAtualizada.getEndereco().setCep(possivelNovoCep);
            universidadeASerAtualizada.getEndereco().setLogradouro(possivelNovoLogradouro);
            universidadeASerAtualizada.getEndereco().setBairro(possivelNovoBairro);
            universidadeASerAtualizada.getEndereco().setMunicipio(possivelNovoMunicipio);
            universidadeASerAtualizada.getEndereco().setUnidadeFedrativa(possivelNovaUnidadeFederativa);

            universidadeService.atualizarUniversidade(universidadeASerAtualizada);

            JOptionPane.showMessageDialog(this, "Dados atualizados da Universidade:\n\n" + universidadeASerAtualizada,
                    "Operação realizada com sucesso", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            reportInternalError(this, ex);
        }

    }//GEN-LAST:event_atualizarUniversidadeMenuItemActionPerformed

    public static Universidade mostrarOpcaoDeSelecaoDeUniversidade(Component parentComponent) {
        String nome = JOptionPane.showInputDialog(parentComponent, "Digite o nome da universidade ou parte dele.",
                "Buscar universidade", JOptionPane.QUESTION_MESSAGE);

        List<Universidade> universidadesBuscadas;
        Universidade universidadeSelecionada = null;

        try {
            universidadesBuscadas = UniversidadeService.getInstance().buscarUniversidadePorNome(nome);
            //System.out.println(universidadesBuscadas);
            StringBuilder stringResultadoDaBusca = new StringBuilder();
            for (Universidade universidade : universidadesBuscadas) {
                stringResultadoDaBusca.append(universidade.getNome()).append(" (").append(universidade.getSigla()).append(")\n");
            }
            //JOptionPane.showMessageDialog(this, stringResultadoDaBusca, "Resultado da busca", JOptionPane.PLAIN_MESSAGE);
            String siglaDaUniversidadeASerSelecionada = JOptionPane.showInputDialog(parentComponent,
                    stringResultadoDaBusca, "Digite a sigla da Universidade desejada",
                    JOptionPane.QUESTION_MESSAGE);

            for (Universidade universidade : universidadesBuscadas) {
                if (universidade.getSigla().equalsIgnoreCase(siglaDaUniversidadeASerSelecionada)) {
                    universidadeSelecionada = universidade;
                }
            }

            while (universidadeSelecionada == null) {
                JOptionPane.showMessageDialog(parentComponent, "Não foi encontrada nenhuma"
                        + "Universidade com a sigla " + siglaDaUniversidadeASerSelecionada);
                siglaDaUniversidadeASerSelecionada = JOptionPane.showInputDialog(parentComponent,
                        stringResultadoDaBusca, "Digite a sigla da Universidade desejada",
                        JOptionPane.QUESTION_MESSAGE);

                for (Universidade universidade : universidadesBuscadas) {
                    if (universidade.getSigla().equalsIgnoreCase(siglaDaUniversidadeASerSelecionada)) {
                        universidadeSelecionada = universidade;
                    }
                }

            }
            System.out.println("Id da Universidade selecionada: " + universidadeSelecionada.getId());

            //JOptionPane.showMessageDialog(this, universidadeASerSelecionada, "Dados de " + universidadeASerSelecionada.getNome(), JOptionPane.PLAIN_MESSAGE);
        } catch (NullPointerException nullPointerException) {
            // Nao faz nada, ja que o usuario apenas clicou em fechar o caixa de dialogo.
        } catch (NotFoundException notFoundException) {
            JOptionPane.showMessageDialog(parentComponent, "Não foi encontrada nenhuma Universidade.");
        } catch (Exception exception) {
            reportInternalError(parentComponent, exception);
        }

        return universidadeSelecionada;
    }

    public static Endereco mostrarOpcaoDeSelecaoDeEndereco(Component parentComponent, String title)
            throws InvalidInputFromUserException {
        Endereco endereco;

        String logradouro = JOptionPane.showInputDialog(parentComponent, "Digite o logradouro do endereço.",
                title,
                JOptionPane.QUESTION_MESSAGE);
        String bairro = JOptionPane.showInputDialog(parentComponent, "Digite o bairro do endereço.",
                title, JOptionPane.QUESTION_MESSAGE);
        String municipio = JOptionPane.showInputDialog(parentComponent, "Digite município do endereço.",
                title,
                JOptionPane.QUESTION_MESSAGE);
        String siglaUnidadeFederativa = JOptionPane.showInputDialog(parentComponent, "Digite a sigla da Unidade"
                + " Federativa do endereço.\nUnidades Federativas:\n\n" + UnidadeFederativa.valuesToString(),
                title, JOptionPane.QUESTION_MESSAGE);
        String cep = JOptionPane.showInputDialog(parentComponent, "Digite o CEP do endereço.",
                title,
                JOptionPane.QUESTION_MESSAGE);

        try {
            endereco = new Endereco(cep, logradouro, bairro, municipio, UnidadeFederativa.fromSigla(siglaUnidadeFederativa));
        } catch (IllegalArgumentException illegalArgumentException) {
            throw new InvalidInputFromUserException("Sigla da Unidade Federaiva inválida.");
        }

        return endereco;
    }

    /**
     * Registra no logger um erro interno e mostra uma mensagem de erro interno
     * ao usuario em caixa de dialogo JOptionPane.
     *
     * @param parentComponent
     * @param exception
     */
    public static void reportInternalError(Component parentComponent, Exception exception) {
        Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, exception);
        reportInternalErrorToUser(parentComponent, exception);
    }

    /**
     * Mostra uma mensagem de erro ao usuario em uma caixa de dialogo
     * JOptionPane.
     *
     * @param parentComponent
     * @param exception
     */
    private static void reportInternalErrorToUser(Component parentComponent, Exception exception) {
        JOptionPane.showMessageDialog(parentComponent, "Houve um erro interno. Se desejar, envie uma "
                + "mensagem ao suporte informando a seguinte mensagem:\n\n" + exception.getMessage(),
                "ERRO INTERNO", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainView().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null,
                            "Houve um erro interno. Se desejar, envie uma mensagem para o suporte explicitando "
                            + "a mensagem de erro abaixo:\n\n " + ex.getMessage(),
                            "ERRO INTERNO", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem atualizarUniversidadeMenuItem;
    private javax.swing.JMenuItem buscarUniversidadeMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem inserirUniversidadeMenuItem;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem removerUniversidadeMenuItem;
    // End of variables declaration//GEN-END:variables

}
